---
pageClass: page-post
title: BEM up your variables
pubDate: 18th Oct, 2014
category: Work
published: true
tags:
- sass
---

{{#extend "layout-post"}}

{{#content "post-summary"}}
Taking the concept of BEM - Block, Element, Modifier - and applying it to help with Sass variables in my framework.
{{/content}}


{{#content "post-content"}}
<p>This came about after a friend of mine had a little look through <a href="{{package.repository.url}}" rel="external">my code</a> whilst helping me with a CSS bug. <a href="http://tristanashley.com" rel="external">Tristan</a> noticed that I took the concept of <abbr title="Block, Element, Modifer">BEM</abbr> a little further by naming my variables with modifiers.</p>

<h2>BEM - an overview</h2>
<p>Harry Roberts gives a great in-depth <a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" rel="external">overview of BEM</a> but in summary the syntax is as follows:</p>
<pre>
  <code>
    .block { }
    .block__element { }
    .block--modifier { }
  </code>
</pre>
<p>Where <code class="inline">.block</code> is the main component, a selector denoted with <code class="inline">__</code> is a child component related to the parent, and a selector denoted with <code class="inline">--</code> is a modification of the element.</p>
<p>This shows in the CSS and in markup that the elements are related without the CSS having to be overqualified/nested as much - creating cleaner, more reusable selectors.</p>
<p>A <small>(somewhat{{emoji 'christmas_tree'}})</small> practical example:</p>
<pre>
  <code>
    .site-logo { } /* Standard logo */
    .site-logo__link { } /* Link in the logo */
    .site-logo--christmas { } /* Special edition logo */
  </code>
</pre>

<h2>An example in Sass variables:</h2>
<p>Here I define the blue you’ll see around the site as <code class="inline">#2A2C9F</code> {{emoji 'large_blue_diamond'}} and in order to use lighter and darker shades I use the Sass functions <code class="inline">lighten()</code> and <code class="inline">darken()</code>.</p>
<p>I do this to achieve a level of consistency between shades and so that the color value will only need to be changed in a single place if required.</p>

<pre>
  <code>
   $brand-blue: #2A2C9F;
   $brand-blue--light: lighten($brand-blue, 10);
   $brand-blue--dark: darken($brand-blue, 10);
 </code>
</pre>

<p>Advantages of naming them in this way are:</p>
<ul>
  <li>I now know of the dependency chain - one of the prominent features of BEM</li>
  <li>I can quickly see that other colors will be affected if I change the main brand color</li>
  <li>I know not to modify that color further down in my stylesheets, breaking brand guidelines that may be in place</li>
</ul>

<p>This is of course a small example but the beauty of this idea is that it can easily scale to much bigger projects and teams.</p>
<p>It may be overdoing it a little but it definitely helps me out when maintaining my styles, and I use it a fair bit in the <a href="https://github.com/furzeface/sassface" rel="external">Sass framework</a> I’m in the midst of building.</p>
{{/content}}


{{#content "post-tldr"}}
<p>A tip to help with naming Sass color variables and keeping consistent conventions throughout your code, using the <abbr title="Block, Element, Modifer">BEM</abbr> methodology.</p>
<p>Resources:</p>
<ul>
  <li><a href="http://bem.info/" rel="external">BEM</a></li>
  <li><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#lighten-instance_method" rel="external">Sass lighten function</a></li>
  <li><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#darken-instance_method" rel="external">Sass darken function</a></li>
</ul>
{{/content}}

{{/extend}}
