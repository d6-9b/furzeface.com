---
pageClass: page-post
title: Yeoman ain’t scary
category: Tutorials
pubDate: 22nd Sept, 2014
published: false
---

{{#extend "layout-post"}}

{{#content "post-summary"}}
Another post in the “Ain’t Scary” series, this post introduces Yeoman, the “Web’s Scaffolding Tool for Modern Webapps” and gives an example of a basic generator setup.
{{/content}}


{{#content "post-content"}}
<h2>Yo man!</h2>
<p>I was first introduced to <a href="http://yeoman.io" rel="external">Yeoman</a> by <a href="http://addyosmani.com/" rel="external">Mr. Addy Osmani</a> at London JS conf last year in his <a href="http://webcomponents2014.appspot.com" rel="external">Web Components Can Do That?!</a> talk.</p>
<p>As I looked further into Yeoman, I could see the use cases and trying it out with generators for <a href="https://github.com/h5bp/generator-h5bp" rel="external">HTML5 Boilerplate</a> and <a href="https://github.com/yeoman/generator-angular" rel="external">Angular</a> were pretty cool.</p>

<figure>
  <img src="{{assetsUrl}}/{{images}}/blog/yeoman.png" alt="Yeoman logo" />
  <figcaption>Yeoman's a friendly guy.</figcaption>
</figure>

<p>It seemed quite daunting - <strong>scary</strong>, if you will, to write my own generator to scaffold a basic project but I gave it a good go again recently and picked up some tips along the way to share.</p>

<h2>Prerequisites</h2>
<ul>
  <li><a href="http://nodejs.org/" rel="external">NodeJS</a></li>
  <li><a href="http://yeoman.io" rel="external">Yeoman</a> - <code class="inline">$ npm install -g yo</code></li>
  <li><a href="https://github.com/yeoman/generator-generator" rel="external">Generator-generator</a> - <code class="inline">$ npm i -g generator-generator</code></li>
</ul>

<h2>Generating all of the things</h2>
<p>First off, run the generator generator to generate all of the things:</p>
<code>
  $ yo generator
</code>

<figure>
  <img src="{{assetsUrl}}/{{images}}/blog/yo_dawg_generators.jpg" alt="Yo Dawg, I heard you like generators meme">
  <figcaption>Yo Dawg, I heard you like generators</figcaption>
</figure>

<p>You’ll then be asked a series of questions and will end up with a basic directory structure - something like this:</p>

<p class="todo">@todo: this</p>

<h3>Naming conventions</h3>
<p>Yeoman conventions dictate that your npm package (when it gets published) follows the naming convention of <code class="inline">generator-yourGenerator</code>.</p>

<h3>Setting up your templates</h3>
<p>Next what I do is set up additional project meta files to be copied over when you use the generator - these have to reside in the <code class="inline">/app</code> directory.</p>

<p>I'll start with a <code class="inline">.gitignore</code>, <code class="inline">.editorconfig</code>, <code class="inline">yourProject.sublime-project</code> file along with a <code class="inline">README.md</code> for the project and optionally (more on optionally later) a <code class="inline">.travis.yml</code> config for the CI build process.</p>

<h4 class="heading--epsilon">A sample <code class="inline">bower.json</code></h4>

<p>Furthermore I'll create a base set of dependencies with a <code class="inline">bower.json</code> and <code class="inline">.bowerrc</code> files. <small>(See <a href="http://daniel.furzeface.com/blog/bower-aint-scary" rel="archives">my post on Bower</a> for a nice intro to this).</small></p>
<div data-gist="ed4cabb01069a9410375"></div>


<h4 class="heading--epsilon">A sample <code class="inline">Gruntfile.js</code></h4>
<p>Lastly in the set up stage I'll add in a sample <code class="inline">Gruntfile.js</code> from one of my other projects, stripped back to a more generic reusable implementation.</p>

{{!-- <div data-gist="ed4cabb01069a9410375"></div> --}}
<p class="todo">@todo: [gist of Gruntfile]</p>

<h3>Copying over your templates</h3>
<p class="todo">@todo: [section on index.js and copying over templates - this.src.copy]</p>

<h2>Scaffolding</h2>
<p>Now the real fun begins!</p>
<p>You’ll notice Lo-Dash style delimiters in the templates. These are to be used when running the generator to allow a user to pass options via the command line and scaffold the files with the input. This is where the true power of the Yeoman generator happens!
</p>

{{/content}}


{{#content "post-tldr"}}

{{/content}}

{{/extend}}
